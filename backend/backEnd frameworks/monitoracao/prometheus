serve monitorar metricas da aplica√ßao em tempo real

habilitar o prometheus no properties
management.endpoints.web.exposure.include=*

baixar as dependencias 
<dependency>
 <groupId>io.micrometer</groupId>
 <artifactId>micrometer-registry-prometheus</artifactId>
 <scope>runtime</scope>
</dependency>

*baixar a image no docker

prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
     - "./src/main/resources/prometheus.yml:/etc/prometheus/prometheus.yml" /pegar o arquivo de configuracao
    command: "--config.file=/etc/prometheus/prometheus.yml" //executar o arquivo 
    ports:
      - "9090:9090"    
    extra_hosts:
     - "localhost:host-gateway" // fazer a comunicao entre prometheus e aplicacao
     
* arquivo de configuracao do prometheus dentro da pasta src/main/resources
  https://prometheus.io/docs/prometheus/latest/getting_started/

global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
##  - job_name: 'prometheu'
##
##  # Override the global default and scrape targets from this job every 5 seconds.
##    scrape_interval: s
#
#    static_configs:
#      - targets: ['localhost:9090']
         
  - job_name: 'spring-study'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s
    metrics_path: "/actuator/prometheus" //end point das metricas da nossa aplicacao

    static_configs:
      - targets: ['localhost:8080']  //nossa aplicacao 
      
           
